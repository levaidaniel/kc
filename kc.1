.\"Copyright (c) 2011-2014 LEVAI Daniel
.\"All rights reserved.
.\"Redistribution and use in source and binary forms, with or without
.\"modification, are permitted provided that the following conditions are met:
.\"	* Redistributions of source code must retain the above copyright
.\"	notice, this list of conditions and the following disclaimer.
.\"	* Redistributions in binary form must reproduce the above copyright
.\"	notice, this list of conditions and the following disclaimer in the
.\"	documentation and/or other materials provided with the distribution.
.\"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
.\"ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
.\"WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
.\"DISCLAIMED. IN NO EVENT SHALL LEVAI Daniel BE LIABLE FOR ANY
.\"DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
.\"(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\"LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
.\"ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
.\"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
.\"SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
.Dd Jul 12, 2014
.Dt KC 1
.Os
.Sh NAME
.Nm kc
.Nd console based username and password management application
.Sh SYNOPSIS
.Nm
.Op Fl k Ar database file
.Op Fl c Ar keychain name/idx
.Op Fl C Ar keychain name
.Op Fl r
.Op Fl p Ar password file
.Op Fl P Ar kdf
.Op Fl e Ar cipher
.Op Fl m Ar mode
.Op Fl b
.Op Fl B
.Op Fl v
.Op Fl h
.Sh DESCRIPTION
The
.Nm
utility is a console based username and password management application using an encrypted XML document as its database. The database file is protected by a password that the user supplies during the creation of a new database. This password can be at most 256 characters long, and is converted to a key with a KDF (key derivation function). If the supplied password (either by user input or in a password file) is longer than the allowed maximum,
.Nm
silently discards the rest of it.
.Pp
A database file can contain multiple keychains, and keychains in turn can contain multiple keys (usernames if you like) and values (passwords if you like).
.Pp
After starting
.Nm
the
.Cm help
command shows the available commands, and usage information for them. If you're in a hurry, for starters, you create a new entry with the
.Cm new
command, then entering only a number in the command line will display the entry with the given index. You quit from the display with 'q' or EOT (usually CTRL+d).
.Pp
The CLI supports tab-completion for commands and keychains.
.Pp
There is a utility in the source package (it is also available from the project website) that converts an exported pwsafe database to a
.Nm
compatible XML database, which can be imported using the
.Cm importxml
command.
.Pp
When saving the database (
.Cm write
command)
.Nm
will create a temporary file (under the same directory as the opened database file), and will first try to save the whole database to that temporary database file. When this succeeds, only then will
.Nm
replace the old database with the new one, so you will always have a usable and intact (but potentially older) version of your database file.
.Pp
.Em NOTE :
It is considered a good practice, to periodically manually backup the database file(s) you use with
.Nm .
This could just mean a simple:
.Bd -literal -offset |||
$ cp ~/.kc/default ~/.kc/default-bkp
.Ed
.Pp
.Nm
doesn't try excessively hard to recover from hard and/or non-recoverable errors (OS, memory, disk etc...), and in some cases this could mean that it will simply exit with an appropriate error message. No need to worry, but keep this in mind like you would with a common word processor or text editor and save (
.Cm write
) periodically, for example when you edit many keys at once. See also the
.Em CAVEATS
section regarding this.
.Pp
.Em NOTE :
Currently there is no character set conversion taking place in the program. In this case this means you must be ready to display anything you type in. If somehow you still end up with texts you can not display properly, and for whatever reason you can not edit them in
.Nm ,
you can "repair" such database by dumping its content to a
.Nm
XML file (see the
.Cm dump
command below), converting the plain text XML file to a working character set, then importing back that XML file (see the
.Cm importxml
command below).
.Ss PARAMETERS
.Bl -tag -offset ||| -width |
.It Fl k Ar file
Use
.Ar file
as database. The default is
.Pa ~/.kc/default.kcd .
.It Fl c Ar keychain
Change to the specified keychain after opening the database.
.It Fl C Ar keychain
Same as
.Fl c ,
but force
.Ar keychain
to be the keychain's name, instead of its index number. More on this is in the
.Cm c
and
.Cm cc
commands' description.
.It Fl r
Open the database in read-only mode.
.Nm
will not try to lock the database file, and commands which could modify the database will not be available.
.It Fl p Ar file
Read password from
.Ar file .
The last new line gets stripped.
.It Fl P Ar kdf
KDF to use with the password. Valid parameters are:
.Bl -tag -offset ||| -width |
.It Ar sha1
OpenSSL's PKCS5 PBKDF2 with SHA-1.
.Nm
uses 5000 rounds.
.It Ar sha512
OpenSSL's PKCS5 PBKDF2 with SHA-512. This is the default.
.Nm
uses 5000 rounds.
.It Ar bcrypt
Bcrypt PBKDF based on Blowfish.
.Nm
uses 16 rounds, and this is slightly slower than the SHA-* variants. On Linux, a bundled bcrypt implementation from OpenBSD is used, and its version is the one that was available at the time of this
.Nm
release.
.It Ar scrypt
If compiled with libscrypt,
.Nm
can use the scrypt KDF. Note that this can be slow on older machines, but therein lies the algorithm's strength.
.El
.Pp
More information is in the
.Em KDF
section.
.It Fl e Ar cipher
Encryption cipher for database encryption. Valid parameters are:
.Bl -tag -offset ||| -width |
.It Ar aes256
This is the default
.It Ar blowfish
.El
.It Fl m Ar mode
Cipher mode for database encryption. Different encryption ciphers can have different modes. The valid parameters are:
.Bl -tag -offset || -width |
.It aes256
.Bl -tag -offset ||| -width |
.It Ar cbc
This is the default
.It Ar cfb128
.It Ar ofb
.El
.It blowfish
.Bl -tag -offset ||| -width |
.It Ar cbc
.It Ar ecb
.It Ar cfb64
.It Ar ofb
.El
.El
.Pp
More information is in the
.Em CIPHERS
section.
.It Fl b
Batch mode. Enable reading commands and the password from standard input. In this case, the password must be on the first line (like it would be in interactive mode).
.It Fl B
Batch mode. Enable reading commands from standard input, but prompt for the password.
.It Fl v
Display version.
.It Fl h
Display help.
.El
.Ss COMMANDS
These commands are available in the CLI:
.Bl -tag -offset ||| -width |
.It Cm new Op name
Create a new key in the current keychain. Both key and value will be prompted for, except when
.Ar name
is specified; then it will be used as the key's name.
.Pp
Character sequences can be used in values:
.Pp
"\en" - create a new line, and make the result a multi-line value.
.Pp
"\er", "\eR" - these will be replaced with 2 and 4 (respectively) random printable characters.
.Pp
"\ea", "\eA" - these will be replaced with 2 and 4 (respectively) random alpha-numeric characters.
.Pp
Character sequences are to be used in values, regardless of their order or count, and can be escaped using double backslashes (eg.: "\e\ea").
.It Cm list Op pager Op offset
List
.Ar pager
number of keys per page from the current keychain, skipping
.Ar offset
indices if specified. Every key gets prefixed by its index number. If
.Ar pager
is not specified, the default value of 20 is used. The special value 0 means to not use the pager. If
.Ar offset
is not specified, it is not used.
.It Cm ls Op pager Op offset
Alias of
.Cm list .
.It Cm edit Ar index
Edit a key.
.Ar index
is the key's index number in the current keychain.
.Pp
Character sequence rules in values apply to this command also. See command
.Cm new
for more information about this.
.It Cm swap Ar index Ar index
Swap two keys, exchanging their index numbers. The two
.Ar index
parameters are the keys' index numbers in the current keychain.
.It Cm insert Ar index Ar index
Move the key at the first
.Ar index
parameter to the index at the second
.Ar index
parameter in the current keychain. Surrounding indices will be shifted backwards or forwards.
.It Cm search Ar string
Search for
.Ar string
in key names in the current keychain.
.Pp
Optional modifiers:
.Pp
.Ql \&!
suffix (eg.: search!): show non-matching keys.
.Pp
.Ql *
suffix (eg.: search*): search in every keychain.
.Pp
.Ql i
suffix (eg.: searchi): case of characters doesn't matter.
.Pp
You can combine the modifiers.
.It Cm / Ar pattern
Search for
.Ar pattern
regular expression in key names in the current keychain.
.Pp
Optional modifiers:
.Pp
.Ql \&!
suffix (eg.: /!): show non-matching keys.
.Pp
.Ql *
suffix (eg.: /*): search in every keychain.
.Pp
.Ql i
suffix (eg.: /i): case of characters doesn't matter.
.Pp
You can combine the modifiers.
.It Cm near Ar index Op context
Display the keyname of key at
.Ar index
position, and also print the surrounding keys' name in at most
.Ar context
vicinity. Only the keys' names and index numbers get displayed.
.It Cm csearch Ar string
Search for
.Ar string
in keychain names.
.Pp
Optional modifiers:
.Pp
.Ql \&!
suffix (eg.: csearch!): show non-matching keychains.
.Pp
.Ql i
suffix (eg.: csearchi): case of characters doesn't matter.
.Pp
You can combine the modifiers.
.It Cm c/ Ar pattern
Search for
.Ar pattern
regular expression in keychain names.
.Pp
Optional modifiers:
.Pp
.Ql \&!
suffix (eg.: c/!): show non-matching keychains.
.Pp
.Ql i
suffix (eg.: c/i): case of characters doesn't matter.
.Pp
You can combine the modifiers.
.It Cm c Ar keychain
Change the current keychain.
.Ar keychain
can be the keychain's index number or name. Index number takes priority when addressing a keychain. (see command
.Cm cc )
.It Cm cc Ar keychain_name
Works like
.Cm c ,
but the keychain's name takes priority over its index number. (see command
.Cm c )
.It Cm cdel Ar keychain
Delete a keychain.
.Ar keychain
can be the keychain's index number or name. Index number takes priority when addressing a keychain. (see command
.Cm ccdel )
.It Cm ccdel Ar keychain_name
Works like
.Cm cdel ,
but the keychain's name takes priority over its index number. (see command
.Cm cdel )
.It Cm clear Op count
Emulate a screen clearing. Scrolls a 100 lines by default, which can be multiplied by
.Ar count
times if specified.
.It Cm clist
List keychains. Every keychain gets prefixed by its index number.
.It Cm cls
Alias of
.Cm clist .
.It Cm cnew Op name
Create a new keychain. If
.Ar name
is not given then prompt for one. Empty string cancels the addition.
.It Cm cedit
Edit the current keychain's name and description.
.It Cm copy Ar index Ar keychain
Copy a key from the current keychain to another keychain.
.Ar index
is the key's index number to copy and
.Ar keychain
is the destination keychain's index number or name. Index number takes priority when addressing a keychain.
.It Cm cp Ar index Ar keychain
Alias of
.Cm copy .
.It Cm move Ar index Ar keychain
Move a key from the current keychain to another keychain.
.Ar index
is the key's index number to move and
.Ar keychain
is the destination keychain's index number or name. Index number takes priority when addressing a keychain.
.It Cm mv Ar index Ar keychain
Alias of
.Cm move .
.It Cm del Ar index
Delete a key.
.Ar index
is the key's index number in the current keychain.
.It Cm rm Ar index
Alias of
.Cm del .
.It Cm passwd Op Fl P Ar kdf
Change the database password and optionally the KDF. All changes will be written immediately.
.Pp
More information about the
.Ar kdf
optional argument is in the
.Fl P
parameter description and the KDF section of this manual.
.It Cm help Op command
Print application help or describe a
.Ar command .
.It Cm status
Display information about the database.
.It Cm export Fl k Ar filename Op Fl P Ar kdf Op Fl e Ar cipher Op Fl m Ar cipher_mode Op Fl c Ar keychain
Export the database to a
.Nm
compatible encrypted database file named
.Ar filename
(if no extension specified, ".kcd" will be appended).
.Pp
Optional arguments
.Ar kdf ,
.Ar cipher
and
.Ar cipher_mode
can be used to specify a different KDF, encryption cipher and cipher mode to be used while exporting the database. This doesn't change the current database's parameters, but when importing this exported database, the parameters in use must be the same (or specified explicitly when using the
.Cm import
command).
.Pp
When specifying
.Ar keychain ,
export only that keychain.
.Ar keychain
can be the keychain's index number or name. Index number takes priority when addressing a keychain. (see command
.Cm dump ,
.Cm import
and
.Cm append )
.It Cm dump Fl k Ar filename Op Fl c Ar keychain
Dump the database to a
.Nm
compatible XML file named
.Ar filename
(if no extension specified, ".xml" will be appended).
.Pp
When specifying a keychain, dump only that keychain to the XML file.
.Ar keychain
can be the keychain's index number or name. Index number takes priority when addressing a keychain.
(see command
.Cm export )
.Em NOTE :
the created XML file will be plain text.
.It Cm import Fl k Ar filename Op Fl P Ar kdf Op Fl e Ar cipher Op Fl m Ar cipher_mode
Import and overwrite the current database with the one from a
.Nm
compatible encrypted database file named
.Ar filename .
.Ar filename
must be a proper
.Nm
database.
.Pp
The
.Ar kdf
.Ar cipher
and
.Ar cipher_mode
optional arguments can be used to specify these parameters if they differ from the current database's. (see command
.Cm importxml ,
.Cm export
and
.Cm append )
.It Cm importxml Fl k Ar filename
Import and overwrite the current database with the one from a
.Nm
compatible XML file named
.Ar filename .
.Ar filename
must contain a properly formatted
.Nm
XML document. (see command
.Cm import ,
.Cm export
and
.Cm append )
.It Cm append Fl k Ar filename Op Fl P Ar kdf Op Fl m Ar cipher_mode
Append new and merge existing keychains to the database from a
.Nm
compatible encrypted database file named
.Ar filename .
.Ar filename
must be a proper
.Nm
database.
.Pp
The
.Ar kdf
and
.Ar cipher_mode
optional arguments can be used to specify these parameters if they differ from the current database's.
See the
.Em LIMITS
section for information about how
.Nm
deals with limits reached while appending. (see command
.Cm appendxml ,
.Cm export
and
.Cm import )
.It Cm appendxml Fl k Ar filename
Append new and merge existing keychains to the database from a
.Nm
compatible XML file named
.Ar filename .
.Ar filename
must contain a properly formatted
.Nm
XML document. See the
.Em LIMITS
section for information about how
.Nm
deals with limits reached while appending. (see command
.Cm append ,
.Cm export
and
.Cm import )
.It Cm info Op index
Print information about a key in the current keychain or the keychain itself. If
.Ar index
is specified, it is the key's index number in the current keychain. If omitted, information is about the current keychain.
.It Cm quit
Quit the program. If the database has been modified, then ask if it should be saved.
.It Cm exit
Alias of
.Cm quit .
.It Cm tmux Ar index Op line
Copy the value of
.Ar index
to tmux's paste buffer.
.Ar index
is the key's index number in the current keychain.
.Ar line
can be used to specify the line number to copy, if
.Ar index
is a multiline value (defaults to 1).
.It Cm xclip Ar index Op line
Copy the value of
.Ar index
to the PRIMARY X11 selection (ie.: middle mouse button).
.Ar index
is the key's index number in the current keychain.
.Ar line
can be used to specify the line number to copy, if
.Ar index
is a multiline value (defaults to 1).
.It Cm Xclip Ar index Op line
Copy the value of
.Ar index
to the CLIPBOARD X11 selection (aka.: CTRL+c - CTRL+v).
.Ar index
is the key's index number in the current keychain.
.Ar line
can be used to specify the line number to copy, if
.Ar index
is a multiline value (defaults to 1).
.It Cm version
Display the program version.
.It Cm write
Save the database.
.It Cm save
Alias of
.Cm write .
.It Cm any number
To display a key's value, you enter the key's index (ie.: only a number) into the command line, then it will display the entry with the given index. You quit from the display with 'q' or EOT (usually CTRL+d). By specifying another number after the index (eg.: '12 2' -- here 12 is the index, and 2 is the extra number (spice) after it), that many random characters will be displayed between the value's characters. You can navigate up/down through a multi-line value's lines with keys j/k, n/p, f/b, +/-, [/], {/}, </>, <SPACE>, <ENTER>, <BACKSPACE>. Typing a number between 1-9 will jump directly to that line.
.Pp
It is possible to copy the displayed value to a clipboard (or such) with these hotkeys:
.Bl -tag -offset ||| -width |
.It t
Insert the value to tmux's paste buffer. This will try to execute the
.Xr tmux 1
binary with the
.Em set-buffer
command passing the
.Em value
as its parameter.
.It x
Copy the value to the PRIMARY X selection (ie.: middle mouse button).
.It X
Copy the value to the CLIPBOARD X selection (aka.: CTRL+c - CTRL+v).
.El
The latter two will try to execute the
.Xr xclip 1
binary, piping the
.Em value
to its standard input.
.Pp
The above binaries must be in PATH in order to use the hotkeys.
.Pp
Fair warnings before using the clipboard features:
.Bl -enum -offset ||| -width |
.It
If you don't trust the system where you're running
.Cm kc
then don't use these features, as you can not be sure that the binaries in your PATH are not tampered with and would record the passwords.
.It
Removal of the
.Em values
from the clipboards are not being dealt with. This should be the user's responsibity.
.El
.Pp
Perhaps the extra number (spice) after a key's index and its usefulness can use some further explanation. Let's say you want to display a password to use it on a website's form, but you don't want the people walking by or around you to recognize words, numbers or parts of it. You can use this nifty "trick" to tell
.Nm
to display that many random characters between the value's original characters when showing it to you. Granted, it will look like a mess (although, that is what we wanted), but you can copy-paste it to the password entry in the website form in question. Then you can start to "blindly" delete the given number of characters from it by moving you cursor to the beginning (eg. HOME key), pressing 'spice' numbers of DEL, then jump over one character to the right (with the right arrow key), then delete the random characters again, then repeating this until you reach the end of you original password (those who played Mortal Kombat will feel a bit nostalgic). You can catch on to this, because the random character padding is of fixed length, so the pattern remains the same for the whole password. You don't even have to pay attention to the original length of the password, because after you've completed the pattern (DELs-move-DELs-move...) and removed the spice (ie.: every padding random character), you end up with you original password, and you'll just be deleting nothing after the end of the string. This of course only makes sense if the form is a password input field, so you (and everybody else) just see stars or dots in place of the password.
.El
.Ss CIPHERS
Databases are encrypted with the AES-256 cipher in CBC mode, if another cipher and mode was not specified explicitly. (see the
.Fl e
and
.Fl m
options). Ciphers use a 128 byte key generated with a KDF (key derivation function) from the supplied password (see the
.Em KDF
section), and an IV (initialization vector) that is read from the host's specific random device (
.Pa /dev/urandom
on Linux and
.Pa /dev/random
on everything else ) as characters. See also the
.Em CAVEATS
section.
To change the encryption cipher and/or its mode, you can use the
.Cm export
command.
.Ss KDF
The KDF converts the user supplied password with a generated salt to a strong key that can be used safely during encryption. Every SHA-* based PBKDF2 KDF uses 5000 rounds in
.Nm .
On changing the KDF in use, see the
.Fl P
option and the
.Cm passwd
command. Of course, changing the KDF with which the database was created/opened means that the new KDF must be used from then on. This is because changing the KDF changes the key the database was encrypted with.
.Sh LIMITS
.Nm
has limits when it deals with keychains and keys in keychains. The maximum number of elements for both is the upper limit an unsigned long integer can store on the running platfrom, minus one. These limits are enforced every time a new keychain or key is being created (or moved, copied, etc...). Appending is done in a non-atomic fashion. This means that
.Nm
will not create a keychain if it would not fit in the limit, and it will not append keys to an existing keychain if they would not fit in the limit. However, for example, if a database that is being appended contains a keychain whose keys could not fit in the existing keychain, and also contains a keychain whose keys could fit in the existing keychain, then the one that could fit will be appended, and the one that could not will not be appended. This means that appending is atomic on the keychain level (or keys level, if you like), and not atomic on the database level.
.Sh EXAMPLES
.Bl -tag -offset ||| -width |
.It Em pwsafe_to_kc.pl :
.Bd -literal -offset |||
# Export the pwsafe database to a cleartext file:
$ pwsafe --exportdb > pwsafe_export
Enter passphrase for .pwsafe.dat:

# Convert the cleartext pwsafe database to a kc XML database file:
$ pwsafe_to_kc.pl pwsafe_export kc_db.xml
opening pwsafe_export for reading.
opening kc_db.xml for writing.
Converting...
Done.
.Ed
.Pp
After the above commands, you should end up with a
.Nm
compatible XML database. You can import it to
.Nm
using the
.Cm importxml
command.
.It Em Adding new entries :
.Bd -literal -offset |||
.Em Simple :
<default% > new testuser
<default% NEW value> testpass

.Em Prompt for both key and value :
<default% > new
<default% NEW key> testuser2
<default% NEW value> test_\er_pass_with_random_characters:\eA

.Em Using the 'key' only as an indication :
<default% > new www.mysecuresite.com
<default% NEW value> user_name\enpass-word

.Em Using the random and newline character sequences :
<default% > new testuser3
<default% NEW value> \er\eR\en\ea\eA\enthis is a multi-line value!

.Em Creating new keychains :
<default% > cnew email_accounts
<default% > cnew
<default% NEW keychain name> WebSite Accounts
<default% NEW keychain description> description

<default% > cnew 2
<default% NEW keychain description> Two
Created keychain: 3. 2

.Em Results :

.Em Listing the keys in the current keychain :
<default% > list
0. testuser
1. testuser2
2. www.mysecuresite.com
3. testuser3

.Em Displaying values in the current keychain :
<default% > 0
[testuser] testpass
<default% > 1
[testuser2] test_,x_pass_with_random_characters:6nzm
<default% > 2
[www.mysecuresite.com] [1/2] user_name
[www.mysecuresite.com] [2/2] pass-word
<default% > 3
[testuser3] [1/3] v#)z!9
[testuser3] [2/3] HwRz7i
[testuser3] [3/3] this is a multi-line value!

.Em Listing keychains :
<default% > clist
0. default
1. email_accounts
2. WebSite Accounts
3. 2

.Em Switch to another keychains :
<default% > c email_accounts
<email_accounts% > c 2
<WebSite Accounts% > c 3
<2% > c 2
<WebSite Accounts% > cc 2
<2% >
.Ed
.It Em Editing existing entries :
.Bd -literal -offset |||
<default% > list
0. testuser
1. testuser2
2. www.mysecuresite.com
3. testuser3

.Em Edit an entry in the current keychain :
<default% > edit 1
<default% EDIT key> testuser2
<default% EDIT value> test_pass_with_random_characters:6nzm
<default% > 1
[testuser2] test_pass_with_random_characters:6nzm

.Em Rename a keychain :
<default% > cedit
<default% EDIT keychain name> my_own keychain
<default% EDIT keychain description> description
my_own keychain% >
.Ed
.El
.Sh CAVEATS
If you use
.Ar cfb128
or
.Ar ofb
as the cipher mode, there is no specific sign if you enter a wrong password during the opening of a database; in this case the database would seem to be corrupt after decrypting, and
.Nm
will not be able to open it.
.Pp
There is no character conversion taking place for the input fields.
.Pp
.Nm
will exit without saving the database (with a corresponding error message) when an out-of-memory condition arises.
.Sh AUTHOR
.Nm
was written by
.An LEVAI Daniel
<leva@ecentrum.hu>
.Pp
Source, information, bugs:
https://github.com/levaidaniel/kc
